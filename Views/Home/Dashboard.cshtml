@using AdminLTE_MVC.Snmp;

<!-- Modal Popup -->
<div class="modal fade" id="dialog">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
                <h4 class="modal-title">Header</h4>         
				<button type="button" class="close" data-dismiss="modal">&times;</button>                                                     
			</div> 
			<div class="modal-body">
				Generating a template card with pre-determined values for demo purposes...
			</div>   
			<div class="modal-footer">
                <button type="button" class="btn btn-default" data-bind="modal" data-dismiss="modal">Submit</button>
				<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>                               
			</div>
		</div>                                                                       
	</div>                                          
</div>
<!-- Content Header -->
<div class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-2">
        <h1 class="m-0">Widgets
        </h1>
      </div>
      <button type="button" id="btn" class="btn btn-primary" data-bind="modal">
        Create New <i class="fas fa-plus"></i>
      </button>
    </div>
  </div>
</div>

<!-- Content -->
<div class="content">
  <div class="container-fluid">
    <!-- First Row -->
    <div class="row row-auto">
      <!-- Column A -->
      <section class="col-lg-3 connectedSortable ui-sortable">
        <!-- Card 1 -->
        <div class="card card-info">
          <div class="card-header">
            <h3 class="card-title"><i class="fas fa-thermometer"></i> Kabin Sıcaklık</h3>

            <div class="card-tools">
              <button type="button" class="btn btn-tool" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
              </button>
            </div>
          </div>
          <div class="card-body gauge-parent">
            <div class="text-center">
                @SnmpManager.GetValue(Model[1]) °C
            </div>
            <canvas id="gaugeOne" style="min-height: 100%; height: 100%; max-height: 100%; max-width: 100%;"></canvas>
          </div>

          <div class="card-footer text-center">
            More info <i class="fas fa-arrow-circle-right"></i>
          </div>
        </div>
        <!-- Card 2 -->
        <div class="card card-primary">
          <div class="card-header ui-sortable-handle" style="cursor: move;">
            <h3 class="card-title"><i class="fas fa-droplet"></i> Kabin Nem</h3>

            <div class="card-tools">
              <button type="button" class="btn btn-tool" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
              </button>
            </div>
          </div>
          <div class="card-body gauge-parent">
            <div class="text-center">
              @SnmpManager.GetValue(Model[3])%
            </div>
            <canvas id="gaugeTwo" style="min-height: 100%; height: 100%; max-height: 100%; max-width: 100%;"></canvas>
          </div>
          <div class="card-footer text-center">
            More info <i class="fas fa-arrow-circle-right"></i>
          </div>
        </div>
        <!-- Card 3 -->
        @(new Card("primary", "TestCard").Generate())
      </section>

      <!-- Column B -->
      <section class="col-lg-3 connectedSortable ui-sortable">
       
        <!-- Card 2 -->

        <!-- Card 3 -->

      </section>

      <!-- Column C -->
      <section class="col-lg-3 connectedSortable ui-sortable">
        <!-- Card 1 -->

        <!-- Card 2 -->

        <!-- Card 3 -->

      </section>

      <!-- Column D -->
      <section class="col-lg-3 connectedSortable ui-sortable">
        <!-- Card 1 -->

        <!-- Card 2 -->

        <!-- Card 3 -->

      </section>
    </div>
  </div>
</div>

<script>
var optsOne = {
    // color configs
    colorStart: "#6fadcf",
    colorStop: void 0,
    gradientType: 0,
    strokeColor: "#e0e0e0",
    generateGradient: true,
    percentColors: [[0.0, "#a9d70b" ], [0.50, "#f9c802"], [1.0, "#ff0000"]],
    // customize pointer
    pointer: {
      length: 0.8,
      strokeWidth: 0.035,
      iconScale: 1.0
    },
    // static labels
    staticLabels: {
      font: "10px sans-serif",
      labels: [0, 20, 25, 35, 40, 50],
      fractionDigits: 0
    },
    // static zones
    staticZones: [
      {strokeStyle: "#F03E3E", min: 0, max: 20},
      {strokeStyle: "#FFDD00", min: 20, max: 25},
      {strokeStyle: "#30B32D", min: 25, max: 35},
      {strokeStyle: "#FFDD00", min: 35, max: 40},
      {strokeStyle: "#F03E3E", min: 40, max: 50}
    ],
    // render ticks
    renderTicks: {
      divisions: 5,
      divWidth: 1.1,
      divLength: 0.7,
      divColor: "#333333",
      subDivisions: 3,
      subLength: 0.5,
      subWidth: 0.6,
      subColor: "#666666"
    },
    // the span of the gauge arc
    angle: 0.1,
    // line thickness
    lineWidth: 0.44,
    // radius scale
    radiusScale: 1.0,
    // font size
    fontSize: 40,
    // if false, max value increases automatically if value > maxValue
    limitMax: false,
    // if true, the min value of the gauge will be fixed
    limitMin: false,
    // High resolution support
    highDpiSupport: true
};
var optsTwo = {
    // color configs
    colorStart: "#6fadcf",
    colorStop: void 0,
    gradientType: 0,
    strokeColor: "#e0e0e0",
    generateGradient: true,
    percentColors: [[0.0, "#a9d70b" ], [0.50, "#f9c802"], [1.0, "#ff0000"]],
    // customize pointer
    pointer: {
      length: 0.8,
      strokeWidth: 0.035,
      iconScale: 1.0
    },
    // static labels
    staticLabels: {
      font: "10px sans-serif",
      labels: [0, 30, 40, 55, 65, 100],
      fractionDigits: 0
    },
    // static zones
    staticZones: [
      {strokeStyle: "#F03E3E", min: 0, max: 30},
      {strokeStyle: "#FFDD00", min: 30, max: 40},
      {strokeStyle: "#30B32D", min: 40, max: 55},
      {strokeStyle: "#FFDD00", min: 55, max: 65},
      {strokeStyle: "#F03E3E", min: 65, max: 100}
    ],
    // render ticks
    renderTicks: {
      divisions: 5,
      divWidth: 1.1,
      divLength: 0.7,
      divColor: "#333333",
      subDivisions: 3,
      subLength: 0.5,
      subWidth: 0.6,
      subColor: "#666666"
    },
    // the span of the gauge arc
    angle: 0.1,
    // line thickness
    lineWidth: 0.44,
    // radius scale
    radiusScale: 1.0,
    // font size
    fontSize: 40,
    // if false, max value increases automatically if value > maxValue
    limitMax: false,
    // if true, the min value of the gauge will be fixed
    limitMin: false,
    // High resolution support
    highDpiSupport: true
};
var optsThree = {
    // color configs
    colorStart: "#6fadcf",
    colorStop: void 0,
    gradientType: 0,
    strokeColor: "#e0e0e0",
    generateGradient: true,
    percentColors: [[0.0, "#a9d70b" ], [0.50, "#f9c802"], [1.0, "#ff0000"]],
    // customize pointer
    pointer: {
      length: 0.8,
      strokeWidth: 0.035,
      iconScale: 1.0
    },
    // static labels
    staticLabels: {
      font: "10px sans-serif",
      labels: [0, 20, 25, 35, 40, 50],
      fractionDigits: 0
    },
    // static zones
    staticZones: [
      {strokeStyle: "#F03E3E", min: 0, max: 20},
      {strokeStyle: "#FFDD00", min: 20, max: 25},
      {strokeStyle: "#30B32D", min: 25, max: 35},
      {strokeStyle: "#FFDD00", min: 35, max: 40},
      {strokeStyle: "#F03E3E", min: 40, max: 50}
    ],
    // render ticks
    renderTicks: {
      divisions: 5,
      divWidth: 1.1,
      divLength: 0.7,
      divColor: "#333333",
      subDivisions: 3,
      subLength: 0.5,
      subWidth: 0.6,
      subColor: "#666666"
    },
    // the span of the gauge arc
    angle: 0.1,
    // line thickness
    lineWidth: 0.44,
    // radius scale
    radiusScale: 1.0,
    // font size
    fontSize: 40,
    // if false, max value increases automatically if value > maxValue
    limitMax: false,
    // if true, the min value of the gauge will be fixed
    limitMin: false,
    // High resolution support
    highDpiSupport: true
};

var gaugeOne = new Gauge(document.getElementById('gaugeOne')).setOptions(optsOne);
var gaugeTwo = new Gauge(document.getElementById('gaugeTwo')).setOptions(optsTwo);
var gaugeThree = new Gauge(document.getElementById('gaugeThree')).setOptions(optsThree);

gaugeOne.maxValue = 50;
gaugeOne.set(@SnmpManager.GetValue(Model[1]));

gaugeTwo.maxValue = 100;
gaugeTwo.set(@SnmpManager.GetValue(Model[3]));

gaugeThree.maxValue = 50;
gaugeThree.set(@SnmpManager.GetValue(Model[1]));
</script>
<script src="~/js/pages/popup.js"></script>
<script src="~/js/pages/sorting.js"></script>
