@using AdminLTE_MVC.Snmp;

<!-- Modal Popup -->
<div class="modal fade" id="dialog" runat="server">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title">Create New Card</h4>
        <button type="button" class="close" data-dismiss="modal">&times;</button>
      </div>
      <div class="modal-body">
         @* @using (Html.BeginForm("Index", "Home", FormMethod.Post))
          {
              <table cellpadding="0" cellspacing="0">
              <tr>
              <th colspan="2" align="center">Person Details</th>
              </tr>
              <tr>
              <td>Card Title: </td>
              <td>
                  @Html.TextBoxFor(m => m.CardCreationModel.Title)
              </td>
              </tr>
              <tr>
              <td>Element: </td>
              <td>
                  @Html.DropDownListFor(m => m.CardCreationModel.ElementName, new List<SelectListItem>
                  { 
                      new SelectListItem{Text="Male", Value="M"},
                      new SelectListItem{Text="Female", Value="F"}
                  }, "Please select")
                  
              </td>
              </tr>
              <tr>
              <td></td>
              <td><input type="submit" value="Submit"/></td>
              </tr>
              </table>
          }*@
       @* <form>
          <div class="card-body">
            <!-- Title Field -->
            <div class="form-group">
              <label for="Title">Card Title</label>
              <input type="text" class="form-control" id="cardTitle" placeholder="Enter title" />
            </div>

            <!-- Element Field -->
            <div class="form-group">
              <label for="Name">Element</label>
              <input type="radio" class="form-control" id="cardTitle" placeholder="Enter title" />
            </div>
          </div>
          <div class="card-footer">
            <button type="submit" class="btn btn-primary">Submit</button>
          </div>
        </form>*@
      </div>
    </div>
  </div>
</div>

<!-- Content Header -->
<div class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-2">
        <h1 class="m-0">Widgets
        </h1>
      </div>
      <button type="button" id="btn" class="btn btn-primary" data-bind="modal">
        Create New <i class="fas fa-plus"></i>
      </button>
    </div>
  </div>
</div>

<!-- Content -->
<div class="content">
  <div class="container-fluid">
    <!-- First Row -->
    <div class="row row-auto">
      <!-- Column A -->
      <section class="col-lg-3 connectedSortable ui-sortable">
        <!-- Card 1 -->
        <div class="card card-info">
          <div class="card-header">
            <h3 class="card-title"><i class="fas fa-thermometer"></i> Kabin Sıcaklık</h3>

            <div class="card-tools">
              <button type="button" class="btn btn-tool" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
              </button>
            </div>
          </div>
          <div class="card-body gauge-parent">
            <div class="text-center">
                @SnmpManager.GetValue(Model.Target[1]) °C
            </div>
            <canvas id="gaugeOne" style="min-height: 100%; height: 100%; max-height: 100%; max-width: 100%;"></canvas>
          </div>

          <div class="card-footer text-center">
            More info <i class="fas fa-arrow-circle-right"></i>
          </div>
        </div>
       
      </section>

      <!-- Column B -->
      <section class="col-lg-3 connectedSortable ui-sortable">
       

        <!-- Card 2 -->
        <div class="card card-primary">
          <div class="card-header ui-sortable-handle" style="cursor: move;">
            <h3 class="card-title"><i class="fas fa-droplet"></i> Kabin Nem</h3>

            <div class="card-tools">
              <button type="button" class="btn btn-tool" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
              </button>
            </div>
          </div>
          <div class="card-body gauge-parent">
            <div class="text-center">
              @SnmpManager.GetValue(Model.Target[3])%
            </div>
            <canvas id="gaugeTwo" style="min-height: 100%; height: 100%; max-height: 100%; max-width: 100%;"></canvas>
          </div>
          <div class="card-footer text-center">
            More info <i class="fas fa-arrow-circle-right"></i>
          </div>
        </div>
        <!-- Card 3 -->

      </section>

      <!-- Column C -->
      <section class="col-lg-3 connectedSortable ui-sortable">
        <!-- Card 3 -->
        @(new Card("primary", "TestCard").Generate(Model.Target[1]))

        <!-- Card 2 -->

        <!-- Card 3 -->

      </section>

      <!-- Column D -->
      <section class="col-lg-3 connectedSortable ui-sortable">
        <!-- Card 1 -->

        <!-- Card 2 -->

        <!-- Card 3 -->

      </section>
    </div>
  </div>
</div>

<script>
let options = {
    // color configs
    colorStart: "#6fadcf",
    colorStop: void 0,
    gradientType: 0,
    strokeColor: "#e0e0e0",
    generateGradient: true,
    percentColors: [[0.0, "#a9d70b" ], [0.50, "#f9c802"], [1.0, "#ff0000"]],
    // customize pointer
    pointer: {
      length: 0.8,
      strokeWidth: 0.035,
      iconScale: 1.0
    },
    // render ticks
    renderTicks: {
      divisions: 5,
      divWidth: 1.1,
      divLength: 0.7,
      divColor: "#333333",
      subDivisions: 3,
      subLength: 0.5,
      subWidth: 0.6,
      subColor: "#666666"
    },
    // the span of the gauge arc
    angle: 0.1,
    // line thickness
    lineWidth: 0.44,
    // radius scale
    radiusScale: 1.0,
    // font size
    fontSize: 40,
    // if false, max value increases automatically if value > maxValue
    limitMax: false,
    // if true, the min value of the gauge will be fixed
    limitMin: false,
    // High resolution support
    highDpiSupport: true
};
let gauge = [];
for (let i = 0; i < @Model.CardGauge.GetLength(); i++) {
    currentElementId = 'gauge' + i;
    gauge[i] = new Gauge(document.getElementById(currentElementId)).setOptions(options);

    let nameList = JSON.parse('@Html.Raw(Json.Serialize(Model.CardGauge.GetName()))');
    let valueList = JSON.parse('@Html.Raw(Json.Serialize(Model.CardGauge.GetValue()))');
    let minList = JSON.parse('@Html.Raw(Json.Serialize(Model.CardGauge.GetMin()))');
    let lowAlarmList = JSON.parse('@Html.Raw(Json.Serialize(Model.CardGauge.GetLowAlarm()))');
    let lowWarningList = JSON.parse('@Html.Raw(Json.Serialize(Model.CardGauge.GetLowWarning()))');
    let highWarningList = JSON.parse('@Html.Raw(Json.Serialize(Model.CardGauge.GetHighWarning()))');
    let highAlarmList = JSON.parse('@Html.Raw(Json.Serialize(Model.CardGauge.GetHighAlarm()))');
    let maxList = JSON.parse('@Html.Raw(Json.Serialize(Model.CardGauge.GetMax()))');

    gauge[i].staticZones = [
        { strokeStyle: "#F03E3E", min: minList[i], max: lowAlarmList[i] },
        { strokeStyle: "#FFDD00", min: lowAlarmList[i], max: lowWarningList[i] },
        { strokeStyle: "#30B32D", min: lowWarningList[i], max: highWarningList[i] },
        { strokeStyle: "#FFDD00", min: highWarningList[i], max: highAlarmList[i] },
        { strokeStyle: "#F03E3E", min: highAlarmList[i], max: maxList[i] },
    ];

    gauge[i].staticLabels = {
        font: "10px sans-serif",
        labels: [minList[i], lowAlarmList[i], lowWarningList[i], highWarningList[i], highAlarmList[i], maxList[i],
        fractionDigits: 0,
    };

    gauge[i].minValue = minList[i];
    gauge[i].maxValue = maxList[i];
    gauge[i].set(valueList[i])
}
</script>
<script src="~/js/pages/popup.js"></script>
<script src="~/js/pages/sorting.js"></script>
